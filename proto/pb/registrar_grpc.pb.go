// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: registrar.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EtcdRegistrar_Register_FullMethodName        = "/EtcdRegistrar/Register"
	EtcdRegistrar_HeartbeatActive_FullMethodName = "/EtcdRegistrar/HeartbeatActive"
	EtcdRegistrar_Logout_FullMethodName          = "/EtcdRegistrar/Logout"
	EtcdRegistrar_Discover_FullMethodName        = "/EtcdRegistrar/Discover"
)

// EtcdRegistrarClient is the client API for EtcdRegistrar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EtcdRegistrarClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	HeartbeatActive(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Reply, error)
	Logout(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Reply, error)
	Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error)
}

type etcdRegistrarClient struct {
	cc grpc.ClientConnInterface
}

func NewEtcdRegistrarClient(cc grpc.ClientConnInterface) EtcdRegistrarClient {
	return &etcdRegistrarClient{cc}
}

func (c *etcdRegistrarClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, EtcdRegistrar_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *etcdRegistrarClient) HeartbeatActive(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, EtcdRegistrar_HeartbeatActive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *etcdRegistrarClient) Logout(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, EtcdRegistrar_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *etcdRegistrarClient) Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error) {
	out := new(DiscoverResponse)
	err := c.cc.Invoke(ctx, EtcdRegistrar_Discover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EtcdRegistrarServer is the server API for EtcdRegistrar service.
// All implementations must embed UnimplementedEtcdRegistrarServer
// for forward compatibility
type EtcdRegistrarServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	HeartbeatActive(context.Context, *Service) (*Reply, error)
	Logout(context.Context, *Service) (*Reply, error)
	Discover(context.Context, *DiscoverRequest) (*DiscoverResponse, error)
	mustEmbedUnimplementedEtcdRegistrarServer()
}

// UnimplementedEtcdRegistrarServer must be embedded to have forward compatible implementations.
type UnimplementedEtcdRegistrarServer struct {
}

func (UnimplementedEtcdRegistrarServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedEtcdRegistrarServer) HeartbeatActive(context.Context, *Service) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartbeatActive not implemented")
}
func (UnimplementedEtcdRegistrarServer) Logout(context.Context, *Service) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedEtcdRegistrarServer) Discover(context.Context, *DiscoverRequest) (*DiscoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discover not implemented")
}
func (UnimplementedEtcdRegistrarServer) mustEmbedUnimplementedEtcdRegistrarServer() {}

// UnsafeEtcdRegistrarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EtcdRegistrarServer will
// result in compilation errors.
type UnsafeEtcdRegistrarServer interface {
	mustEmbedUnimplementedEtcdRegistrarServer()
}

func RegisterEtcdRegistrarServer(s grpc.ServiceRegistrar, srv EtcdRegistrarServer) {
	s.RegisterService(&EtcdRegistrar_ServiceDesc, srv)
}

func _EtcdRegistrar_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdRegistrarServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EtcdRegistrar_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdRegistrarServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EtcdRegistrar_HeartbeatActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdRegistrarServer).HeartbeatActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EtcdRegistrar_HeartbeatActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdRegistrarServer).HeartbeatActive(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _EtcdRegistrar_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdRegistrarServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EtcdRegistrar_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdRegistrarServer).Logout(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _EtcdRegistrar_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdRegistrarServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EtcdRegistrar_Discover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdRegistrarServer).Discover(ctx, req.(*DiscoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EtcdRegistrar_ServiceDesc is the grpc.ServiceDesc for EtcdRegistrar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EtcdRegistrar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EtcdRegistrar",
	HandlerType: (*EtcdRegistrarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _EtcdRegistrar_Register_Handler,
		},
		{
			MethodName: "HeartbeatActive",
			Handler:    _EtcdRegistrar_HeartbeatActive_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _EtcdRegistrar_Logout_Handler,
		},
		{
			MethodName: "Discover",
			Handler:    _EtcdRegistrar_Discover_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registrar.proto",
}
